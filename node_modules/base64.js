var base64 = function () {};

var encodeDictionary =['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/'];
/**
* encode function()
*/
base64.prototype.encode = function (str) {
	var encodedString = [];
	for(i = 0, length = str.length; i <length; i++){
		switch(i%3){
			case 0:
				var charOne = (str.charCodeAt(i)) >> 2;
				encodedString.push(charOne);
				break;
			case 1:
				// 3 = parseInt('00000011',2) (binary mask)
				var charTwo = (str.charCodeAt(i-1) & 3) << 4;
				//convert 240 to binary to get the mask used
				charTwo += (str.charCodeAt(i) & 240) >> 4 ;
				encodedString.push(charTwo);
				var charThree = (str.charCodeAt(i) & 15) << 2;
				charThree += (str.charCodeAt(i+1) & 192) >> 6;
				encodedString.push(charThree);
				break;
			case 2:
				var charFour = str.charCodeAt(i) & 63;
				encodedString.push(charFour)
				break;
		}
	}
	//console.log(encodedString.length - str.length);
	for(i = 0, length = encodedString.length; i < length; i++){
		console.log(encodeDictionary[encodedString[i]]);
	}
	

};
/**
* First Function to test node_module concept
*/
base64.prototype.printHello = function (name) {
	return 'Hello! My name is ' + name + '!';
};

module.exports = new base64();