var base64 = function () {};

var encodeDictionary =['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/'];
/**
* encode function()
*/
base64.prototype.encode = function (str) {
	var encodedSlices = [];
	// first, divid the input bytes streams into blocks of 3 bytes.
	var inputSliced = [];
	for(i = 0, length = str.length; i < length; i = i + 3){
		inputSliced.push(str.slice(i,i+3));
	}
	//encode all 3 byte blocks
	for(i = 0, length = inputSliced.length; i < length; i++){
		//console.log((inputSliced[i].length % 3) + ' -  ' +  inputSliced[i]);
		if ((inputSliced[i].length % 3) === 0){
			//if block contain 3 bytes
			encodedSlices.push(encodingBlock(inputSliced[i]));
		} else { // if block don't have 3 bytes
			switch(inputSliced[i].length){
				case 1:
					inputSliced[i] += '\0\0';
					var encoded = encodingBlock(inputSliced[i]);
					encoded = setCharAt(encoded,2,'=');
					encoded = setCharAt(encoded,3,'=');
					encodedSlices.push(encoded);
				break;
				case 2:
					inputSliced[i] += '\0';
					var encoded = encodingBlock(inputSliced[i]);
					encoded = setCharAt(encoded,3,'=');
					encodedSlices.push(encoded);
				break;
			}

		}
	} 
	console.log(encodedSlices.join(''));
	

};
/**
* First Function to test node_module concept
*/
base64.prototype.printHello = function (name) {
	return 'Hello! My name is ' + name + '!';
};

module.exports = new base64();

//Helpers

function encodingBlock(slice){
	var encodedSlice = '';
	for(j = 0, sliceLength = slice.length; j < sliceLength; j++){
		switch(j%3){
			case 0:
				var charOne = (slice.charCodeAt(j)) >> 2;
				encodedSlice += encodeDictionary[charOne];
				break;
			case 1:
				// 3 = parseInt('00000011',2) (binary mask)
				var charTwo = (slice.charCodeAt(j-1) & 3) << 4;
				//convert 240 to binary to get the mask used
				charTwo += (slice.charCodeAt(j) & 240) >> 4 ;
				encodedSlice += encodeDictionary[charTwo];
				var charThree = (slice.charCodeAt(j) & 15) << 2;
				charThree += (slice.charCodeAt(j+1) & 192) >> 6;
				encodedSlice += encodeDictionary[charThree];
				break;
			case 2:
				var charFour = slice.charCodeAt(j) & 63;
				encodedSlice += encodeDictionary[charFour];
				break;
		}
	}
	return encodedSlice;
}

function setCharAt(str,index,chr) {
	if(index > str.length-1) return str;
	return str.substr(0,index) + chr + str.substr(index+1);
}
